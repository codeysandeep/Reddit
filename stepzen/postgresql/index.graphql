type Subreddit {
  id: ID!
  topic: String
  created_at: DateTime
}

type Post {
  id: ID!
  title: String
  body: String
  image: String
  subreddit_id: ID
  username: String
  created_at: DateTime
  subreddit: [Subreddit]
    @materializer(
      query: "getSubredditListById"
      arguments: [{ name: "id", field: "subreddit_id" }]
    )
  comments: [Comment]
    @materializer(
      query: "getCommentByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
  votes: [Vote]
    @materializer(
      query: "getVotesByPostId"
      arguments: [{ name: "post_id", field: "id" }]
    )
}

type Comment {
  id: ID!
  text: String
  post_id: ID
  username: String
  created_at: DateTime
}

type Vote {
  id: ID!
  upvote: Boolean
  post_id: ID
  username: String
  created_at: DateTime
}

type Query {
  getSubredditList: [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      configuration: "postgresql_config"
    )
  getSubredditListLimit(limit: Int!): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "subreddit"
      order by "created_at" desc
      limit $1
      """
      configuration: "postgresql_config"
    )
  getSubredditListByTopic(topic: String!): [Subreddit]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "subreddit" where "topic" = $1
      """
      configuration: "postgresql_config"
    )
  getSubredditListById(id: ID!): [Subreddit]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "subreddit" where "id" = $1
      """
      configuration: "postgresql_config"
    )

  getPostList: [Post]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "post"
      order by "post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  getPostListByTopic(topic: String!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      select *, "post".id as id from "post"
      join "subreddit" on "subreddit"."id" = "post"."subreddit_id"
      where "subreddit"."topic" = $1
      order by "post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  getPostListByPostId(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      query: """
      select * from "post"
      where "post"."id" = $1
      """
      configuration: "postgresql_config"
    )

  getCommentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  getCommentByPostId(post_id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "comment" where "post_id" = $1
      """
      configuration: "postgresql_config"
    )

  getVoteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  getVotesByPostId(post_id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "vote" where "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
}

type Mutation {
  insertSubreddit(topic: String!): Subreddit
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "subreddit"
      dml: INSERT
      configuration: "postgresql_config"
    )

  insertPost(
    title: String!
    body: String!
    image: String!
    subreddit_id: ID!
    username: String!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )

  insertComment(post_id: ID!, username: String!, text: String!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )

  insertVote(post_id: ID!, username: String!, upvote: Boolean!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )

  deletePost(
    id: ID!
    title: String!
    body: String!
    image: String!
    subreddit_id: ID!
    username: String!
    created_at: DateTime!
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
}
